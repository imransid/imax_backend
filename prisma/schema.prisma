generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  fullName       String
  mobileNumber   String           @unique
  email          String
  password       String
  gender         String
  birthday       String
  medicineList   Medicine[]
  MedicineWeekly MedicineWeekly[]

  MedicMonthly MedicMonthly[]

  MedicInstruction MedicInstruction[]
  MedicReminder    MedicReminder[]
  MedicDuration    MedicDuration[]

  MedicAppointment MedicAppointment[]
}

model MedicineDetails {
  id                          Int                           @id @default(autoincrement())
  userID                      Int // Foreign key to User
  medicineName                String
  medicineStatus              String
  takeStatus                  String
  doseQuantity                String
  doseTime                    String
  // One-to-one relation with MedicineDetailsExtraSetting
  MedicineDetailsExtraSetting MedicineDetailsExtraSetting[]
}

model MedicineDetailsExtraSetting {
  id                           Int    @id @default(autoincrement())
  InstrucTion                  String
  MedicineTakeEachDay          String
  treatmentDurationStartTime   String
  treatmentDurationEndTime     String
  medicineReminderTotalReq     String
  medicineReminderCurrentStock String
  medicineReminderRemindToLeft String

  MedicineDetails   MedicineDetails? @relation(fields: [medicineDetailsId], references: [id])
  medicineDetailsId Int?

  // Optional one-to-one relation to Prescription and Appointment
  prescriptionId Int? @unique
  appointmentId  Int? @unique

  // Relations (foreign keys specified here)
  prescription Prescription? @relation(fields: [prescriptionId], references: [id])
  appointment  Appointment?  @relation(fields: [appointmentId], references: [id])
}

model Appointment {
  id          Int    @id @default(autoincrement())
  date        String
  time        String
  doctorName  String
  location    String
  setReminder String

  // Back relation from MedicineDetailsExtraSetting (no foreign key here)
  medicineDetailsExtraId Int?
  medicineDetailsExtra   MedicineDetailsExtraSetting?
}

model Prescription {
  id       Int    @id @default(autoincrement())
  filePath String

  // Back relation from MedicineDetailsExtraSetting (no foreign key here)
  medicineDetailsExtraId Int?
  medicineDetailsExtra   MedicineDetailsExtraSetting?
}

model Medicine {
  id              Int     @id @default(autoincrement())
  medicineLocalId String  @unique // Ensure this is unique if necessary
  medicineName    String?
  medicineStatus  String?
  takeStatus      String?
  doseQuantity    String?
  doseTime        String?
  strengthMed     String?
  unitMed         String?
  typeMed         String?
  medicineId      String?
  createdDate     String?
  userID          Int // Foreign key to User
  user            User    @relation(fields: [userID], references: [id])
}

model MedicineWeekly {
  id              Int      @id @default(autoincrement())
  medicineLocalId String
  weeklyTime      String[] // Use String array to store weekly time
  timeInterval    Int
  userId          Int // Foreign key to User
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
}

model MedicMonthly {
  id              Int      @id @default(autoincrement())
  medicineLocalId String
  Days            String[]
  userId          Int // Foreign key to User
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  eachOfDays      String
}

model MedicInstruction {
  id              Int      @id @default(autoincrement())
  medicineLocalId String
  userId          Int // Foreign key to User
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  instrucTion     String
}

model MedicReminder {
  id                           Int      @id @default(autoincrement())
  medicineLocalId              String
  userId                       Int // Foreign key to User
  user                         User     @relation(fields: [userId], references: [id])
  createdAt                    DateTime @default(now())
  medicineReminderCurrentStock String
  medicineReminderRemindToLeft String
  medicineReminderTotalReq     String
}

model MedicDuration {
  id                         Int      @id @default(autoincrement())
  medicineLocalId            String
  userId                     Int // Foreign key to User
  user                       User     @relation(fields: [userId], references: [id])
  createdAt                  DateTime @default(now())
  medicineTakeEachDay        String
  treatmentDurationEndTime   String
  treatmentDurationStartTime String
}

model MedicAppointment {
  id              Int      @id @default(autoincrement())
  medicineLocalId String
  userId          Int // Foreign key to User
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  location        String
  date            String
  doctorName      String
  setReminder     String
  time            String
}
